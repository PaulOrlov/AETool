package ru.ptahi.aet.participanteditor;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import javafx.animation.FadeTransition;
import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.embed.swing.JFXPanel;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.scene.Group;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.Toggle;
import javafx.scene.control.ToggleGroup;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.GridPane;
import javafx.util.Duration;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import ru.ptahi.iconmanager.IconManager;
import ru.ptahi.aet.participant.Participant;
import ru.ptahi.aet.participantviewer.SerializeCookie;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//ru.ptahi.aet.participanteditor//ParticipantEditor//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "ParticipantEditorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "ru.ptahi.aet.participanteditor.ParticipantEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ParticipantEditorAction",
        preferredID = "ParticipantEditorTopComponent")
@Messages({
    "CTL_ParticipantEditorAction=ParticipantEditor",
    "CTL_ParticipantEditorTopComponent=ParticipantEditor Window",
    "HINT_ParticipantEditorTopComponent=This is a ParticipantEditor window"
})
public final class ParticipantEditorTopComponent extends TopComponent implements LookupListener {

    private PropertyChangeListener pcl;
    private Lookup.Result<Node> projectOnLookup;
    private Participant p;
    private Node pN;

    //JavaFx fields
    private JFXPanel fxContainer;
    private TextField participantLastName;
    private TextField participantName;
    private TextArea participantComment;
    private ChoiceBox participantDataOfBirthDay;
    private ChoiceBox participantDataOfBirthMonth;
    private ChoiceBox participantDataOfBirthYear;
    private final ToggleGroup participantGender = new ToggleGroup();
    private final ToggleGroup participantExpertLevel = new ToggleGroup();
    private RadioButton participantGenderMale;
    private RadioButton participantGenderFemale;
    private RadioButton participantExpLevelHight;
    private RadioButton participantExpLevelLow;
    private GridPane participantGridPane;

    public ParticipantEditorTopComponent() {
        initComponents();
        setName(Bundle.CTL_ParticipantEditorTopComponent());
        setToolTipText(Bundle.HINT_ParticipantEditorTopComponent());
        setLayout(new BorderLayout());
        fxContainer = new JFXPanel();
        fxContainer.setPreferredSize(new Dimension(600, 400));
        add(fxContainer, BorderLayout.CENTER);

        Platform.setImplicitExit(false);
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                try {
                    createScene();
                } catch (Exception e) {
                    //here you probably want to log something
                    System.out.println("Found an exception ************************************");
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ParticipantEditorTopComponent.class, "ParticipantEditorTopComponent.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ParticipantEditorTopComponent.class, "ParticipantEditorTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(ParticipantEditorTopComponent.class, "ParticipantEditorTopComponent.jLabel3.text")); // NOI18N

        jTextField1.setText(org.openide.util.NbBundle.getMessage(ParticipantEditorTopComponent.class, "ParticipantEditorTopComponent.jTextField1.text")); // NOI18N

        jTextField2.setText(org.openide.util.NbBundle.getMessage(ParticipantEditorTopComponent.class, "ParticipantEditorTopComponent.jTextField2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(ParticipantEditorTopComponent.class, "ParticipantEditorTopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton1)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jLabel3))
                            .addGap(24, 24, 24)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(159, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        projectOnLookup = Utilities.actionsGlobalContext().lookupResult(Node.class);
        projectOnLookup.addLookupListener(this);

        if (!projectOnLookup.allInstances().isEmpty()) {
            pN = projectOnLookup.allInstances().iterator().next();
            p = (Participant) pN.getLookup().lookup(Participant.class);
        }
        if (p == null) {
            return;
        }
        upDateScene();
        pcl = new PCL();
        p.addPropertyChangeListener(pcl);
    }

    @Override
    public void componentClosed() {
        projectOnLookup.removeLookupListener(this);
        if (p != null && pcl != null) {
            p.removePropertyChangeListener(pcl);
        }
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    class PCL implements PropertyChangeListener {

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            upDateScene();
        }
    }

    @Override
    public void resultChanged(LookupEvent le) {
        if (!projectOnLookup.allInstances().isEmpty()) {
            pN = projectOnLookup.allInstances().iterator().next();
            p = (Participant) pN.getLookup().lookup(Participant.class);
            if (p != null) {
                upDateScene();
                pcl = new PCL();
                p.addPropertyChangeListener(pcl);
            }
        }
    }

    private void createScene() {
        Parent root = null;
        try {
            root = FXMLLoader.load(getClass().getResource("Editor.fxml"));
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }

        if (root == null) {
            return;
        }

        participantName = (TextField) root.lookup("#participantName");
        participantLastName = (TextField) root.lookup("#participantLastName");
        participantComment = (TextArea) root.lookup("#participantComment");
        participantDataOfBirthDay = (ChoiceBox) root.lookup("#participantDataOfBirthDay");
        participantDataOfBirthDay.setValue("Day");
        participantDataOfBirthMonth = (ChoiceBox) root.lookup("#participantDataOfBirthMonth");
        participantDataOfBirthMonth.setValue("Month");
        participantDataOfBirthYear = (ChoiceBox) root.lookup("#participantDataOfBirthYear");
        participantDataOfBirthYear.setValue("Year");
        for (int year = 2010; year > 1940; year--) {
            participantDataOfBirthYear.getItems().add(year);
        }

        participantGenderMale = (RadioButton) root.lookup("#participantGenderMale");
        participantGenderFemale = (RadioButton) root.lookup("#participantGenderFemale");
        participantGenderMale.setToggleGroup(participantGender);
        participantGenderMale.setUserData("male");
        participantGenderFemale.setToggleGroup(participantGender);
        participantGenderFemale.setUserData("female");

        final ImageView participantGenderIcon = (ImageView) root.lookup("#participantGenderIcon");

        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                final javafx.scene.image.Image imgFX1 = IconManager.getFXIcon("male-user.png");
                participantGenderIcon.setImage(imgFX1);
            }
        });

        participantGender.selectedToggleProperty().addListener(new ChangeListener<Toggle>() {
            public void changed(ObservableValue<? extends Toggle> ov, Toggle old_toggle, Toggle new_toggle) {
                if (participantGender.getSelectedToggle() != null) {
                    String genderStr = participantGender.getSelectedToggle().getUserData().toString();
                    final Image image = IconManager.getFXIcon(genderStr + "-user.png");
                    Platform.runLater(new Runnable() {
                        @Override
                        public void run() {
                            participantGenderIcon.setImage(image);
                        }
                    });
                }
            }
        });

        participantExpLevelHight = (RadioButton) root.lookup("#participantExpLevelHight");
        participantExpLevelHight.setUserData("hight");
        participantExpLevelLow = (RadioButton) root.lookup("#participantExpLevelLow");
        participantExpLevelLow.setUserData("low");
        participantExpLevelHight.setToggleGroup(participantExpertLevel);
        participantExpLevelLow.setToggleGroup(participantExpertLevel);

        Button saveParticipantBtn = (Button) root.lookup("#saveParticipantBtn");
        saveParticipantBtn.addEventFilter(MouseEvent.MOUSE_CLICKED, new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent t) {
                Map<String, String> map = new HashMap<String, String>();
                map.put("firstName", participantName.getText());
                map.put("lastName", participantLastName.getText());
                map.put("comment", participantComment.getText());
                map.put("gender", participantGender.getSelectedToggle().getUserData().toString());
                map.put("expertLevel", participantExpertLevel.getSelectedToggle().getUserData().toString());
                map.put("dateOfBirth", participantDataOfBirthDay.getValue().toString() + "/" + participantDataOfBirthMonth.getValue().toString() + "/" + participantDataOfBirthYear.getValue().toString());
                p.upDate(map);
                serialize();
                upDateScene();
            }
        });
        
        participantGridPane = (GridPane) root.lookup("#Grid");
        Scene scene = new Scene(root);
        fxContainer.setScene(scene);

        if (p != null) {
            upDateScene();
        }
    }

    private void upDateScene() {
        Platform.runLater(new Runnable() {
            Timeline timeline = new Timeline();

            private void animateHide() {
                FadeTransition ft = new FadeTransition(Duration.millis(200), participantGridPane);
                ft.setFromValue(1.0);
                ft.setToValue(0.0);
                ft.setCycleCount(1);
                ft.setAutoReverse(false);
                ft.playFromStart();
                ft.setOnFinished(new EventHandler<ActionEvent>() {
                    @Override
                    public void handle(ActionEvent event) {
                        doUpdateLogic();
                        animateShow();
                    }
                });
            }
            
            private void doUpdateLogic(){
                if (participantName != null) {
                    participantName.setText(p.getFirstName());
                }
                if (participantLastName != null) {
                    participantLastName.setText(p.getLastName());
                }
                if (participantComment != null) {
                    participantComment.setText(p.getComment());
                }
                if (participantGenderMale != null && participantGenderFemale != null) {
                    if (p.getGender() == null) {
                        participantGenderMale.setSelected(true);
                    } else {
                        if (p.getGender().equals("male")) {
                            participantGenderMale.setSelected(true);
                        } else {
                            participantGenderFemale.setSelected(true);
                        }
                    }
                }
                if (participantExpLevelHight != null && participantExpLevelLow != null) {
                    if (p.getExpertLevel() == null) {
                        participantExpLevelHight.setSelected(true);
                    } else {
                        if (p.getExpertLevel().equals("hight")) {
                            participantExpLevelHight.setSelected(true);
                        } else {
                            participantExpLevelLow.setSelected(true);
                        }
                    }
                }
                String birthdayStr = p.getDateOfBirth();
                if (birthdayStr == null || birthdayStr == "") {
                    participantDataOfBirthDay.setValue("Day");
                    participantDataOfBirthMonth.setValue("Month");
                    participantDataOfBirthYear.setValue("Year");
                    return;
                }
                if (participantDataOfBirthDay != null) {
                    String dayStr = birthdayStr.substring(0, 2);
                    
                    participantDataOfBirthDay.setValue(dayStr);
                }
                if (participantDataOfBirthMonth != null) {
                    String monthStr = birthdayStr.substring(3, birthdayStr.length() - 5);
                    participantDataOfBirthMonth.setValue(monthStr);
                }
                if (participantDataOfBirthYear != null) {
                    String yearStr = birthdayStr.substring(birthdayStr.length() - 4, birthdayStr.length());
                    try {
                        int year = Integer.parseInt(yearStr);
                        participantDataOfBirthYear.setValue(year);
                    } catch (Exception ex) {
                        participantDataOfBirthYear.setValue("Year");
                    }
                    
                }
            }

            private void animateShow() {
                FadeTransition ft = new FadeTransition(Duration.millis(600), participantGridPane);
                ft.setFromValue(0.0);
                ft.setToValue(1.0);
                ft.setCycleCount(1);
                ft.setAutoReverse(false);
                ft.playFromStart();
            }

            @Override
            public void run() {
                animateHide();
            }
        });
    }

    private void serialize() {
        SerializeCookie sc = pN.getLookup().lookup(SerializeCookie.class);
        if (sc != null) {
            sc.serialize();
        }
    }
}
